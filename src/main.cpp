//
// Created by Waffles on 3/20/23.
//
#include "../include/udpBeacon/udpBeacon.h"
#include "../include/DHT20-Pico/DHT20.h"
#include "../include/SGP40-Pico/SGP40.h"
#include "../include/SGP40-Pico/gas-index-algorithm/sensirion_gas_index_algorithm.h"
#include <string>

#include <stdio.h>
#include <stdlib.h>
#include "pico/stdlib.h"
#include "pico/util/queue.h"
#include "pico/multicore.h"
#include "pico/cyw43_arch.h"
#include "lwip/pbuf.h"
#include "lwip/udp.h"


queue_t core_queue;

typedef struct{
    float temperature;
    float humidity;
    int VOC;
} Sensor_data;


void data_core1(){



    SGP40 sgp = SGP40(8,9);

    DHT20 dht = DHT20(8,9);

    sleep_ms(100);


    printf("created sensors\n");

    dht.intializeRegisters();
    printf("init registers\n");
    sleep_ms(100);

    Sensor_data core1Data;
    SGP_Data sgpData;
    DHT_Data dataDHT;


    while(!dht.isReady()){

        printf("sensor is not ready waiting 50ms\n");
        sgp.getData(sgpData);
        printf("getting data:  raw: %d, voc %d \n",sgpData.voc_raw, sgpData.voc_index);

        sleep_ms(100);
    }

    while(true) {

        dht.getData(dataDHT);
        sgp.getData(sgpData);

//        printf("getting data: temp: %f, humid: %f, raw: %d, voc %d \n", dataDHT.tempature, dataDHT.humidity, sgpData.voc_raw, sgpData.voc_index);

        core1Data.humidity = dataDHT.humidity;
        core1Data.temperature = dataDHT.tempature;
        core1Data.VOC = sgpData.voc_index;

        printf("{\"temperature\":%f,\"humidity\":%f,\"VOC\":%d"
//               ",\"frame\":[39.25964, -86.41661, 37.38556, -82.59683, 37.38321, -87.91563, 38.5582, -83.7887, 38.74106, -85.22195, 37.98706, -96.71733, 37.12201, -87.42867, 36.07098, -90.96721, 35.53473, -86.71829, 37.62213, -93.7384, 34.55145, -89.37234, 37.47766, -77.53767, 36.82126, -82.57611, 38.33282, -71.42694, 37.46933, -69.17123, 40.81757, -61.85045, -63.63582, 36.06235, -84.82042, 38.4227, -72.84251, 35.84799, -79.38785, 36.33292, -76.85597, 36.97278, -85.56558, 36.61969, -76.14569, 36.57773, -90.88435, 36.47772, -77.90486, 35.09628, -82.65338, 35.41431, -82.44482, 35.22153, -79.85567, 37.54846, -65.70428, 34.23016, -74.94225, 38.3075, -61.43425, 38.78049, -63.93501, 41.95093, 38.21716, -85.3363, 38.52106, -87.69472, 37.34055, -88.08702, 38.55237, -87.31967, 37.79739, -90.5741, 37.97699, -92.7524, 36.29642, -95.44283, 36.99362, -90.13892, 36.09412, -93.96097, 36.39346, -90.63805, 35.16898, -95.54713, 35.77634, -89.93359, 36.55154, -87.96835, 37.05096, -77.10376, 36.92188, -76.34401, 39.07285, -67.94925, -67.65688, 36.78885, -83.46274, 37.54056, -72.55002, 36.51416, -83.25999, 37.33954, -75.77042, 35.50558, -86.92906, 36.19604, -79.1601, 34.52863, -85.98758, 36.64511, -77.72174, 34.51263, -93.11293, 36.40469, -78.56706, 33.86832, -86.65508, 36.05319, -69.23363, 35.22711, -80.46266, 36.379, -63.97502, 37.30371, -70.50298, 40.35147, 36.92264, -80.63823, 39.1149, -81.82785, 36.28275, -85.9958, 37.3364, -92.63847, 36.37073, -93.6595, 37.12335, -92.23663, 35.27054, -94.93248, 35.83618, -96.2113, 35.47537, -93.93738, 36.19095, -93.42992, 35.44791, -96.30583, 36.09662, -84.65973, 35.70761, -79.63805, 36.1333, -76.53928, 35.49127, -73.4043, 38.07236, -64.58397, -67.53021, 38.37137, -80.36108, 37.56564, -73.70102, 35.89709, -88.70799, 36.05524, -76.34705, 35.00723, -89.49844, 36.13507, -81.08965, 35.02319, -94.29796, 35.51138, -77.72937, 34.79633, -87.95053, 34.29587, -78.40791, 34.52866, -86.28294, 36.39862, -72.05536, 36.05444, -82.82077, 37.41406, -67.94727, 36.43536, -68.27914, 39.12158, 37.50467, -86.5564, 37.10574, -89.50998, 36.18192, -87.30391, 36.48419, -92.02554, 35.09451, -94.20413, 36.3811, -97.68741, 35.77905, -96.24222, 35.85602, -94.53159, 36.05957, -92.27667, 36.1452, -92.29518, 35.25461, -85.34258, 35.76556, -86.27304, 35.18277, -82.87024, 35.79749, -77.42865, 36.19812, -75.8788, 38.51392, -78.35449, -70.72131, 36.54691, -87.14758, 37.69589, -77.66974, 35.57837, -89.56425, 36.66025, -82.48756, 35.55292, -91.97404, 35.03824, -77.56673, 34.68372, -94.16904, 35.86246, -78.88261, 35.7363, -87.74673, 35.98907, -75.0743, 35.28674, -87.77448, 35.88492, -74.92062, 35.39218, -85.8259, 37.6084, -68.58881, 36.64206, -67.21262, 37.32767, 37.82187, -80.00056, 37.89127, -87.53711, 36.06137, -88.31863, 37.08932, -92.92955, 35.21347, -93.08487, 36.33582, -96.21831, 36.23212, -89.11305, 35.41891, -89.96513, 34.76761, -96.37584, 35.32123, -93.68996, 33.85934, -94.20412, 35.94577, -88.06355, 35.43524, -86.57962, 36.20071, -85.0844, 35.20291, -79.3756, 37.00864, -73.27422, -69.87221, 37.36978, -83.3903, 38.17651, -77.74008, 35.50714, -82.99442, 35.51508, -78.22462, 34.49551, -91.54405, 35.48123, -76.93742, 35.26706, -96.04712, 35.64389, -82.84406, 34.61176, -95.40359, 36.06119, -83.51056, 34.56671, -86.67207, 35.22754, -72.38663, 34.40149, -83.05507, 35.07831, -73.39867, 35.01682, -70.64081, 39.0441, 37.68222, -83.96553, 37.97797, -84.85721, 35.44516, -88.57988, 36.93695, -91.50964, 36.2363, -91.26489, 36.42548, -96.9364, 35.91757, -98.19189, 34.73514, -96.82553, 33.95715, -99.40746, 34.1163, -97.00667, 33.72418, -89.90468, 35.60489, -93.80119, 34.1171, -87.74385, 36.03296, -86.08388, 34.34952, -74.73314, 37.33966, -68.56381, -65.9532, 36.68625, -84.30304, 37.2485, -79.15797, 35.94284, -87.89624, 35.61792, -75.85367, 34.61136, -90.85449, 35.888, -78.10254, 34.08813, -92.53239, 35.44479, -83.46492, 34.15155, -94.42467, 33.29111, -82.36711, 34.67847, -86.98759, 33.97543, -75.94627, 34.53745, -83.90201, 34.90515, -71.62163, 36.54611, -69.73578, 38.11646, 37.04034, -77.498, 38.20374, -85.85551, 35.75879, -88.74411, 35.95883, -93.96806, 35.45822, -99.87408, 35.20956, -92.80772, 34.823, -96.80707, 35.35052, -92.04807, 33.66547, -99.82767, 33.69797, -95.29379, 33.90506, -97.82625, 36.35052, -88.3438, 35.15866, -86.34279, 37.1662, -80.54501, 35.66684, -77.6846, 38.61295, -68.64684, -68.92712, 36.97992, -87.15927, 37.02634, -76.29535, 35.43811, -90.99979, 36.3371, -79.95114, 34.01859, -88.66943, 35.009, -82.35779, 33.27652, -95.53407, 35.1235, -83.7018, 33.34314, -100.1601, 35.26196, -80.38147, 33.59, -84.94612, 35.43338, -72.20081, 34.73706, -80.37932, 36.27698, -67.05881, 35.25394, -66.05165, 38.14081, 37.8743, -87.73224, 36.93741, -88.45958, 36.62936, -87.28024, 35.99365, -92.58333, 34.33771, -90.11365, 34.28134, -98.53224, 32.49774, -90.79085, 36.09949, -99.94339, 35.10608, -93.29955, 34.93851, -92.65573, 35.06723, -87.56721, 35.36575, -92.81673, 35.40039, -81.25233, 36.7533, -80.27505, 36.47507, -75.98372, 37.05527, -67.41484, -68.99062, 36.83466, -77.81984, 35.94794, -76.55586, 35.62073, -90.55037, 35.00131, -80.45189, 34.397, -98.21078, 34.64392, -93.32635, 34.72363, -91.05232, 34.42331, -77.12813, 34.09491, -90.55356, 34.17853, -75.83722, 34.95923, -88.01157, 35.27399, -73.33376, 35.71118, -79.25948, 36.34109, -63.46181, 36.57391, -74.95642, 38.15036, 38.27026, -75.21991, 38.01852, -81.42818, 35.92255, -87.60081, 36.07913, -90.31447, 33.97711, -89.88539, 35.83774, -92.53909, 35.11554, -94.43822, 35.2088, -94.87022, 35.79919, -100.1135, 35.55707, -88.98401, 34.65662, -92.35069, 35.51352, -92.22957, 35.64697, -82.56447, 37.34412, -77.70816, 35.65845, -72.82874, 35.67062, -65.49686, -62.01674, 37.0502, -85.24254, 37.71054, -71.44917, 35.87659, -87.62468, 35.29407, -80.84676, 34.38309, -90.96179, 34.87839, -79.39565, 33.82288, -92.62732, 35.3941, -75.32355, 33.20261, -86.19055, 35.33832, -79.48712, 34.73944, -85.07155, 35.44952, -70.92035, 34.96951, -75.48795, 36.89282, -62.78807, 36.55591, -75.60217, 39.18781, 38.1431, -73.75101, 37.82431, -86.87222, 36.72562, -87.76755, 35.36569, -89.62411, 32.45078, -90.17114, 36.28287, -92.8212, 34.44025, -86.51952, 35.75195, -90.01442, 35.86728, -89.31859, 34.64539, -96.3107, 34.71707, -86.46577, 35.02008, -84.77637, 34.42487, -78.70477, 36.50424, -74.29439, 36.01477, -73.78134, 38.41763, -64.4017, -61.87927, 37.46841, -85.66949, 35.98383, -71.80203, 34.85147, -95.15755, 35.36398, -87.39508, 34.38071, -87.91582, 35.87888, -77.85953, 35.35071, -89.05362, 34.76407, -76.41455, 34.41269, -93.77248, 34.87787, -76.32269, 34.64337, -83.79973, 35.56097, -75.62373, 35.71954, -75.34319, 37.28339, -64.27544, 35.66867, -67.05795, 38.58524, 38.38611, -69.91978, 38.04285, -75.38844, 35.8396, -84.71867, 37.01605, -83.08427, 35.93286, -85.04034, 35.81277, -90.63684, 34.54367, -89.17963, 36.16559, -86.80125, 36.04092, -85.82803, 35.66995, -91.88989, 32.48172, -83.12872, 36.28934, -79.16313, 36.58344, -79.4355, 37.04538, -72.19536, 37.60461, -66.57878, 39.57977, -59.64008, -64.07498, 38.52313, -81.88777, 37.21936, -70.70865, 35.63474, -87.36726, 36.49619, -73.71185, 35.03119, -87.12549, 36.12592, -73.25975, 34.12964, -85.73741, 35.42249, -75.79256, 34.36664, -86.87946, 35.39948, -79.31499, 34.81412, -76.33827, 36.50406, -60.60844, 35.07162, -72.11783, 37.63284, -57.40881, 37.73438, -59.85434, 40.05811, 37.86441, -65.99023, 36.96875, -75.62096, 35.91916, -71.92841, 36.50281, -87.67181, 32.2923, -82.66048, 35.0567, -85.08054, 32.20807, -88.1398, 35.00122, -93.40628, 33.21591, -86.13545, 36.18365, -89.05565, 33.9462, -82.6678, 35.63809, -76.09523, 35.87445, -74.74112, 38.18723, -68.89507, 38.64972, -60.28204, 40.43695, -54.63622, -60.97133, 38.88565, -81.45184, 38.14218, -70.47417, 37.13452, -87.66325, 36.40582, -85.46468, 34.85727, -84.36896, 35.71094, -79.88454, 33.74417, -84.97083, 34.46066, -78.09288, 35.36108, -81.42232, 35.34839, -67.91121, 35.93692, -80.66315, 36.72321, -61.08406, 35.62576, -70.11636, 37.24854, -53.31456, 38.74039, -52.99966, 41.17957]"
               ""
               ""
               ""
               ""
               "}\n", core1Data.temperature, core1Data.humidity, core1Data.VOC);

        queue_add_blocking(&core_queue, &core1Data);
//        printf("added data to queue\n");
        sleep_ms(1000);
    }


}



void run_server(Server* srv){

    Sensor_data core1Data;

    ip_addr_t addr;
    ipaddr_aton("10.0.1.255", &addr);

    while(true){




        queue_remove_blocking(&core_queue, &core1Data);

        std::string udpMessage = "{\"ID\": 0,\"temperature\":"+ std::to_string(core1Data.temperature)
                                +",\"humidity\":"+ std::to_string(core1Data.humidity)
                                +",\"VOC\":"+ std::to_string(core1Data.VOC) + "}";

        struct pbuf *dataBuf = pbuf_alloc(PBUF_TRANSPORT, udpMessage.size(), PBUF_RAM);


        memcpy(dataBuf->payload, udpMessage.c_str(), udpMessage.size());

//        err_t error = udp_send(srv->pcb, dataBuf);
        err_t error = udp_sendto(srv->pcb, dataBuf,&addr, 4444 );
        pbuf_free(dataBuf);
        if (error != ERR_OK) {
            if(error == ERR_USE){
                printf("Port alraedy in use");
            }else{
                printf("error=%d\n", error);
            }
        } else {

        }
        sleep_ms(1000);
    }
}

int main(){

    stdio_init_all();
    printf("start\n");

    if (cyw43_arch_init()) {
        return -1;
    }
    cyw43_arch_enable_sta_mode();

    i2c_init(i2c_default, 100000);
    queue_init(&core_queue, sizeof(Sensor_data), 1);


    uint8_t retries = 0;

    while(cyw43_arch_wifi_connect_timeout_ms(SSID, PASS, CYW43_AUTH_WPA2_AES_PSK, 30000)) {
        if(retries >= 3){
            printf("tried 3 times, failed\n");
            sleep_ms(200);
            return -2;
        }
        printf("Failed to connect, retrying %d, %s, %s\n", retries, SSID, PASS);

        sleep_ms(500);
        retries++;
    }



    Server *udpServer  = create_server("10.0.1.255", (void*) run_server);


    printf("Starting server at %s on port %u\n", ip4addr_ntoa(netif_ip4_addr(netif_list)), DEFAULT_UDP_PORT);
    sleep_ms(1000);

    multicore_launch_core1(data_core1);



    udpServer->run_server(udpServer);
    
    cyw43_arch_deinit();

    return 0;
}